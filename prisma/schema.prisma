// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id        String     @id @default(cuid())
  name      String
  username  String     @unique
  email     String?    @unique
  password  String
  role      Role       @default(STUDENT)
  courses   Course[]   @relation("InstructorCourses")
  enrollments Enrollment[]
  submissions Submission[]
  accounts    Account[]

  @@map("users")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

model Course {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  instructorId  String
  instructor    User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules       Module[]
  enrollments   Enrollment[]
  assignments   Assignment[]

  @@map("courses")
}

model Module {
  id        Int       @id @default(autoincrement())
  title     String
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id])
  lessons   Lesson[]

  @@map("modules")
}

model Lesson {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  moduleId  Int
  module    Module    @relation(fields: [moduleId], references: [id])

  @@map("lessons")
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  userId    String
  courseId  Int
  user      User      @relation(fields: [userId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id])

  @@map("enrollments")
}

model Assignment {
  id        Int       @id @default(autoincrement())
  title     String
  description String?
  courseId  Int
  course    Course    @relation(fields: [courseId], references: [id])
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id          Int       @id @default(autoincrement())
  assignmentId Int
  userId      String
  content     String?
  submittedAt DateTime
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  grade       Grade?

  @@map("submissions")
}

model Grade {
  id          Int       @id @default(autoincrement())
  submissionId Int      @unique
  score       Float
  gradedAt    DateTime
  submission  Submission @relation(fields: [submissionId], references: [id])

  @@map("grades")
}
